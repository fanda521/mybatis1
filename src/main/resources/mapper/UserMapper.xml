<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--<mapper namespace="com.kp.entity.User">-->
<!--接口的类全名-->
<mapper namespace="com.kp.dao.UserMapper">
    <sql id="selectColumn">
       id,userAge, userName,userAddress,user_birth
    </sql>

    <select id="selectUserById" parameterType="int" resultType="com.kp.entity.User">
        /*select的操作*/
        select * from user where id = #{id}
    </select>

    <!--type="" 表示和该数据库对应的实体的类的全名-->
    <resultMap id="users" type="com.kp.entity.User">
        <!--声明属性和列的对应关系  要求属性和列名是一致的-->
        <id column="id" property="id"></id>
        <result column="userName" property="userName"></result>
        <result column="userAge" property="userAge"></result>
        <result column="userAddress" property="userAddress"></result>
        <result column="user_birth"  property="userBirth"></result>
        <result column="userAddress" property="address"></result>
    </resultMap>

    <!--resultMap="" 查询到的每一条记录封装成一个对象，将对象存放集合中-->
    <select id="selectAllUsers" resultMap="users">
         select  <include refid="selectColumn"></include> from user
    </select>

    <select id="selectUsersByName" resultMap="users" parameterType="string">
        select  * from user where userName like #{username}
    </select>

    <!--插入操作 #{userName} 获取的是属性的值-->
    <insert id="addUser" parameterType="User"  useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert  into user(userName,userAge,userAddress) values(#{userName},#{userAge},#{address})
    </insert>

    <!--修改的操作-->
    <update id="updateUser" parameterType="User">
        update user  set userName=#{userName},userAddress=#{address} where id = #{id}
    </update>

    <delete id="deleteUser" parameterType="User">
        delete from user  where id = #{id} and userName=#{userName} and userAddress=#{address}
    </delete>

    <!--返回值是map-->
    <!--查询的列先定义-->
    <sql id="columns"> id,userName,userAge,userAddress,user_birth birth </sql>
    <!--返回值key是列名，其实是别名，value就是该列对应的值-->
    <select id="selectUserById2" resultType="map">
      <!-- <![CDATA[  select  <include refid="columns"/> from user  where id = #{id} or id > #{id2} ]]>-->
        select  <include refid="columns"/> from user  where id = #{id}
    </select>

    <!--分页需要统计记录条数 返回值是 map<totals,value>-->
    <select id="selectCount" resultType="hashmap">
        select count(*) totals from user
    </select>

    <!--如果返回值是map情况，必须返回值是一条记录或者没有记录-->
    <!--<select id="selectUserById3" resultType="map">
        &lt;!&ndash; <![CDATA[  select  <include refid="columns"/> from user  where id = #{id} or id > #{id2} ]]>&ndash;&gt;
        select  <include refid="columns"/> from user
    </select>-->
    <!--    List<User> selectUser3(@Param("name") String userName,
                           @Param("columName") String columName,
                           @Param("orderType") String orderType);-->
    <select id="selectUser3" resultMap="users">
        select <include refid="columns"></include> from  user where userName like #{name} order by ${columName} ${orderType}
    </select>

    <select id="selectUser4" resultMap="users">
        select <include refid="columns"></include> from  user where userName like #{userName} order by ${columName} ${orderType}
    </select>

    <!--分页  pageNo 是第几页数据 pageSize查询多少条 -->
    <select id="selectUser5" resultMap="users">
        select <include refid="columns"></include> from  user where userName like #{userName}   order by ${columName} ${orderType} limit ${pageNo},${pageSize}
    </select>

    <!--动态sql-->
    <select id="selectUser6" resultMap="users" parameterType="User">
        select <include refid="columns"></include> from  user
            <where>
                <if test="userName != null"> userName like #{userName}   </if>
                <!--<if test="address != null">  or userAddress like #{address}  </if>-->
                <if test="userAddress == '深圳,罗湖'"> or userAddress like #{address}  </if>
            </where>
            <if test="columName != null and orderType != null">
              order by ${columName} ${orderType}
            </if>
    </select>

    <!--修改-->
    <!-- 修改   update user set userName = #{userName}, userAddress = #{userAddress},-->
    <update id="updateUser2" parameterType="User" >
        update user
        <set>
            <if test="userName != null"> userName = #{userName}, </if>
            <if test="userAddress != null"> userAddress = #{userAddress}, </if>
            <if test="userAge != null"> userAge = #{userAge}, </if>
            <if test="userBirth != null"> user_birth = #{userBirth}, </if>
        </set>
        where id = #{id}
    </update>

    <!--集合查询
    List<User> selectUser7(List list);  in (1,2,3)-->
    <select id="selectUser7" resultMap="users">
        select * from user
        <where>
            id in <foreach collection="list" index="index" open="(" separator="," close=")" item="item">${item}</foreach>
        </where>
    </select>
</mapper>